// B√†i t·∫≠p: Longest Substring with At Most K Distinct Characters
// Cho chu·ªói s v√† s·ªë nguy√™n k. Tr·∫£ v·ªÅ ƒë·ªô d√†i chu·ªói con d√†i nh·∫•t m√† c√≥ t·ªëi ƒëa k k√Ω t·ª± kh√°c nhau.

// V√≠ d·ª• 1:
// Input: s = "eceba", k = 2
// Output: 3
// Gi·∫£i th√≠ch: "ece" c√≥ 2 k√Ω t·ª± kh√°c nhau.

// V√≠ d·ª• 2:
// Input: s = "aa", k = 1
// Output: 2
// Gi·∫£i th√≠ch: Chu·ªói con "aa" ch·ªâ c√≥ 1 k√Ω t·ª± kh√°c nhau.
// üëâ G·ª£i √Ω c√°ch t∆∞ duy (Kh√¥ng code):
// ‚úÖ X√°c ƒë·ªãnh d·∫°ng:

// Substring (li√™n ti·∫øp) ‚Üí Sliding Window

// K√≠ch th∆∞·ªõc thay ƒë·ªïi v√¨ ta ch∆∞a bi·∫øt d√†i bao nhi√™u ‚Üí Variable size

// ‚úÖ √ù t∆∞·ªüng ch√≠nh:

// Duy·ªát t·ª´ng k√Ω t·ª± b·∫±ng right pointer.

// Th√™m k√Ω t·ª± v√†o map ho·∫∑c hash ƒë·ªÉ ƒë·∫øm t·∫ßn su·∫•t.

// N·∫øu s·ªë k√Ω t·ª± kh√°c nhau > k:

// D·ªãch left l√™n ‚Üí x√≥a b·ªõt k√Ω t·ª±

// C·∫≠p nh·∫≠t maxLength = right - left + 1 khi s·ªë k√Ω t·ª± kh√°c nhau ‚â§ k

// C√¢u h·ªèi t·ª± h·ªèi:

// Khi n√†o d·ªãch left?
// ‚Üí Khi c√≥ h∆°n k k√Ω t·ª± kh√°c nhau trong window.

// D·ªØ li·ªáu c·∫ßn gi·ªØ
// HashMap/HashSet ƒë·∫øm t·∫ßn su·∫•t t·ª´ng k√Ω t·ª±

// left, right pointer

// maxLen ƒë·ªÉ l∆∞u ƒë·ªô d√†i d√†i nh·∫•t t√¨m ƒë∆∞·ª£c

// Required with s = "aaabbc", k = 2

// | left | right | window | unique | action     | maxLen
// | ---- | ----- | ------ | ------ | ---------- |
// | 0    | 0     | a      | 1      | OK         | 1
// | 0    | 1     | aa     | 1      | OK         | 2
// | 0    | 2     | aaa    | 1      | OK         | 3
// | 0    | 3     | aaab   | 2      | OK         | 4
// | 0    | 4     | aaabb  | 2      | OK         | 5
// | 0    | 5     | aaabbc | 3      |(Dich left) | 5
// | 1    | 5     | bbbc   | 3      |            | 5

function longestSubstring(s, k) {
  let left = 0;
  let maxLen = 0;
  let map = new Map();

  for (let right = 0; right < s.length; right++) {
    map.set(s[right], (map.get(s[right]) || 0) + 1);
    while (map.size > k) {
      map.set(s[left], map.get(s[left]) - 1);
      if (map.get(s[left]) === 0) {
        map.delete(s[left]);
      }
      left++;
    }
    maxLen = Math.max(maxLen, right - left + 1);
  }

  return maxLen;
}

// LeetCode 209 ‚Äì Minimum Size Subarray Sum
// ƒê·ªÅ b√†i (T√≥m t·∫Øt):
// Cho m·ªôt m·∫£ng s·ªë nguy√™n d∆∞∆°ng nums v√† m·ªôt s·ªë nguy√™n d∆∞∆°ng target.
// T√¨m ƒë·ªô d√†i nh·ªè nh·∫•t c·ªßa subarray li√™n ti·∫øp sao cho t·ªïng ‚â• target.
// N·∫øu kh√¥ng c√≥, tr·∫£ v·ªÅ 0.

// V√≠ d·ª•
// Input: target = 7, nums = [2,3,1,2,4,3]

// Output: 2

// ‚Üí V√¨ subarray [4,3] c√≥ t·ªïng = 7, ƒë·ªô d√†i = 2 ‚Üí nh·ªè nh·∫•t.

// √ù t∆∞·ªüng sliding window
// V√¨ nums > 0, n√™n sum tƒÉng d·∫ßn ‚Üí ta c√≥ th·ªÉ co c·ª≠a s·ªï ƒë·ªÉ gi·∫£m size.

// S·ª≠ d·ª•ng 2 pointer: left, right

// Duy·ªát right t·ª´ 0 ‚Üí n-1

// M·ªói l·∫ßn:

// C·ªông nums[right] v√†o currentSum.

// N·∫øu currentSum ‚â• target:

// Update minLen = min(minLen, right - left + 1).

// Tr·ª´ nums[left] ra kh·ªèi currentSum ‚Üí left++.

// L·∫∑p l·∫°i vi·ªác co c·ª≠a s·ªï ƒë·∫øn khi currentSum < target.

// V√≠ d·ª• di·ªÖn bi·∫øn
// Input: target = 7, nums = [2,3,1,2,4,3]

// right = 0 ‚Üí sum = 2

// right = 1 ‚Üí sum = 5

// right = 2 ‚Üí sum = 6

// right = 3 ‚Üí sum = 8 ‚Üí ƒë·ªß target
// ‚Üí minLen = 4
// ‚Üí tr·ª´ nums[0]=2 ‚Üí sum=6 ‚Üí left++

// right = 4 ‚Üí sum = 10 ‚Üí ƒë·ªß target
// ‚Üí minLen = 3
// ‚Üí tr·ª´ nums[1]=3 ‚Üí sum=7 ‚Üí minLen=2 ‚Üí left++
// ‚Üí tr·ª´ nums[2]=1 ‚Üí sum=6 ‚Üí left++

// ti·∫øp t·ª•c‚Ä¶

// ‚Üí K·∫øt qu·∫£: minLen = 2

function miniumSubArraySum(nums, target) {
  let left = 0;
  let currentSum = 0;
  let minLen = Infinity;

  for (let right = 0; right < nums.length; right++) {
    currentSum += nums[right];

    while (currentSum >= target) {
      minLen = Math.min(minLen, right - left + 1);
      currentSum -= nums[left];
      left++;
    }
  }
  return minLen === "Infinity" ? 0 : minLen;
}

//  LeetCode 1004 ‚Äì Max Consecutive Ones III
// ƒê·ªÅ b√†i (t√≥m t·∫Øt):

// Cho m·∫£ng nh·ªã ph√¢n nums (ch·ªâ g·ªìm 0 v√† 1) v√† m·ªôt s·ªë nguy√™n k.

// B·∫°n ƒë∆∞·ª£c ph√©p l·∫≠t t·ªëi ƒëa k s·ªë 0 th√†nh 1.

// H√£y t√¨m ƒë·ªô d√†i d√£y con li√™n ti·∫øp d√†i nh·∫•t ch·ªâ to√†n s·ªë 1 m√† b·∫°n c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c sau khi l·∫≠t t·ªëi ƒëa k s·ªë 0.

// V√≠ d·ª•:
// Example 1
// Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
// Output: 6

// Gi·∫£i th√≠ch:
// L·∫≠t 2 s·ªë 0 t·∫°i v·ªã tr√≠ 4 v√† 5 th√†nh 1.
// M·∫£ng th√†nh [1,1,1,0,0,1,1,1,1,1,1]
// D√£y con d√†i nh·∫•t ch·ªâ to√†n 1 l√† 6.
// √ù t∆∞·ªüng sliding window
// Kh·ªüi t·∫°o c·ª≠a s·ªï [left, right].

// Di chuy·ªÉn right sang ph·∫£i.

// Khi s·ªë l∆∞·ª£ng s·ªë 0 trong window > k ‚Üí c·∫ßn d·ªãch left ƒë·ªÉ gi·∫£m s·ªë 0 xu·ªëng ‚â§ k.

// M·ªói b∆∞·ªõc update max window size.

// G·ª£i √Ω thu·∫≠t to√°n:
// D√πng bi·∫øn countZeros ƒë·∫øm s·ªë 0 trong window.

// M·ªói l·∫ßn nums[right] == 0 ‚Üí tƒÉng countZeros.

// N·∫øu countZeros > k:

// Di chuy·ªÉn left t·ªõi khi countZeros ‚â§ k.

// C·∫≠p nh·∫≠t maxLength = right - left + 1.

// ‚Üí ƒê·ªô ph·ª©c t·∫°p O(n).

function maxConsecutiveOne(nums, k) {
  let left = 0;
  let countZeros = 0;
  let maxLength = 0;

  for (let right = 0; right < nums.length; right++) {
    if (nums[right] === 0) {
      countZeros++;
    }

    while (countZeros > k) {
      if (nums[left] === 0) {
        countZeros--;
      }
      left++;
    }

    maxLength = Math.max(maxLength, right - left + 1);
  }

  return maxLength;
}

function run() {
  console.log(
    ">>>>> maxConsecutiveOne",
    maxConsecutiveOne([1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0], 2)
  );
}

export { run };
